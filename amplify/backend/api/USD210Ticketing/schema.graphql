type Note
  @model
  @auth(rules: [{ allow: public }])
  @key(name: "byRequest", fields: ["requestID", "content"]) {
  id: ID!
  requestID: ID!
  content: String!
  createdBy: AWSEmail!
}

type Request
  @model
  @auth(rules: [{ allow: public }])
  @key(
    name: "byBuilding"
    fields: ["buildingID", "urgency", "createdAt"]
    queryField: "requestsByBuilding"
  )
  @key(
    name: "byUrgency"
    fields: ["baseType", "urgency", "createdAt"]
    queryField: "requestsByUrgency"
  )
  @key(
    name: "byRequestor"
    fields: ["baseType", "requestor", "createdAt"]
    queryField: "requestsByRequestor"
  )
  @key(
    name: "byDepartment"
    fields: ["departmentID", "urgency", "createdAt"]
    queryField: "requestsByDepartment"
  ) {
  id: ID!
  dateCompleted: AWSDateTime
  notes: [Note] @connection(keyName: "byRequest", fields: ["id"])
  description: String!
  urgency: Int!
  room: String
  summary: String!
  requestor: AWSEmail!
  completed: Boolean!
  Department: Department @connection(fields: ["departmentID"])
  Building: Building @connection(fields: ["buildingID"])
  buildingID: ID
  departmentID: ID
  baseType: String!
  createdAt: String!
}

type Building @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  leaders: [AWSEmail]
  Requests: [Request] @connection(keyName: "byBuilding", fields: ["id"])
}

type Department @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  manager: AWSEmail
  members: [AWSEmail]
  Requests: [Request] @connection(keyName: "byDepartment", fields: ["id"])
}
